{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./shared/getMinMax.js","webpack://[name]/./shared/decodeImageFrame.js","webpack://[name]/./shared/decoders/decodeLittleEndian.js","webpack://[name]/./shared/decoders/decodeBigEndian.js","webpack://[name]/./shared/decoders/decodeRLE.js","webpack://[name]/./shared/decoders/decodeJPEGBaseline.js","webpack://[name]/./shared/decoders/decodeJPEGLossless.js","webpack://[name]/./shared/calculateMinMax.js","webpack://[name]/./version.js","webpack://[name]/./shared/decoders/decodeJPEGLS.js","webpack://[name]/./shared/decoders/decodeJPEG2000.js","webpack://[name]/./webWorker/index.js","webpack://[name]/./webWorker/webWorker.js","webpack://[name]/./webWorker/decodeTask/decodeTask.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","storedPixelData","min","max","storedPixel","numPixels","length","index","Math","imageFrame","transferSyntax","pixelData","decodeConfig","options","start","Date","getTime","_decodeLittleEndian2","default","_decodeBigEndian2","_decodeRLE2","_decodeJPEGBaseline2","_decodeJPEGLossless2","_decodeJPEGLS2","_decodeJPEG2","Error","shouldShift","undefined","pixelRepresentation","shift","bitsStored","end","decodeTimeInMS","arrayBuffer","buffer","offset","byteOffset","bitsAllocated","slice","Uint16Array","Int16Array","Float32Array","swap16","val","planarConfiguration","frameData","frameSize","rows","columns","outFrame","ArrayBuffer","samplesPerPixel","header","DataView","data","Int8Array","out","outIndex","numSegments","getInt32","inIndex","maxIndex","endOfSegment","j","Uint8Array","decode8Planar","decode8","highByte","decode16","JpegImage","jpeg","parse","colorTransform","getData","getData16","lossless","Decoder","byteOutput","decompressedData","decode","strict","arguments","minMax","_getMinMax2","mustAssign","isNumber","smallestPixelValue","largestPixelValue","console","warn","numValue","charLS","initializeJPEGLS","CharLS","_jpegls_decode","image","isSigned","dataPtr","_malloc","writeArrayToMemory","imagePtrPtr","imageSizePtr","widthPtr","heightPtr","bitsPerSamplePtr","stridePtr","allowedLossyErrorPtr","componentsPtr","interleaveModePtr","result","ccall","width","getValue","height","bitsPerSample","stride","components","allowedLossyError","interleaveMode","imagePtr","set","HEAP8","HEAP16","_free","jpegLSDecode","openJPEG","decodeOpenJpeg2000","bytesPerPixel","signed","imageSizeXPtr","imageSizeYPtr","imageSizeCompPtr","t0","log","sx","sy","nbChannels","perf_timetodecode","src32","Int32Array","HEAP32","from","t1","decodeOpenJPEG","photometricInterpretation","initializeJPEG2000","usePDFJS","OpenJPEG","_jp2_decode","jpxImage","JpxImage","tileCount","tiles","items","decodeJpx","_webWorker","registerTaskHandler","decodeTask","taskHandler","taskHandlers","taskType","initialized","initialize","config","taskConfiguration","self","onmessage","msg","handler","transferList","postMessage","status","workerIndex","importScripts","sourcePath","loadWebWorkerTask","webWorkerTaskPaths","keys","forEach","_decodeJPEG","_decodeJPEGLS","codecsLoaded","loadCodecs","codecsPath","initializeCodecsOnStartup","doneCallback","_decodeImageFrame2","_calculateMinMax2","loadCodecsOnStartup"],"mappings":"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","file":"cornerstoneWADOImageLoaderWebWorker.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cornerstoneWADOImageLoaderWebWorker\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cornerstoneWADOImageLoaderWebWorker\"] = factory();\n\telse\n\t\troot[\"cornerstoneWADOImageLoaderWebWorker\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n","/**\n * Calculate the minimum and maximum values in an Array\n *\n * @param {Number[]} storedPixelData\n * @return {{min: Number, max: Number}}\n */\nfunction getMinMax (storedPixelData) {\n  // we always calculate the min max values since they are not always\n  // present in DICOM and we don't want to trust them anyway as cornerstone\n  // depends on us providing reliable values for these\n  let min = storedPixelData[0];\n  let max = storedPixelData[0];\n  let storedPixel;\n  const numPixels = storedPixelData.length;\n\n  for (let index = 1; index < numPixels; index++) {\n    storedPixel = storedPixelData[index];\n    min = Math.min(min, storedPixel);\n    max = Math.max(max, storedPixel);\n  }\n\n  return {\n    min,\n    max\n  };\n}\n\nexport default getMinMax;\n","import decodeLittleEndian from './decoders/decodeLittleEndian.js';\nimport decodeBigEndian from './decoders/decodeBigEndian.js';\nimport decodeRLE from './decoders/decodeRLE.js';\nimport decodeJPEGBaseline from './decoders/decodeJPEGBaseline.js';\nimport decodeJPEGLossless from './decoders/decodeJPEGLossless.js';\nimport decodeJPEGLS from './decoders/decodeJPEGLS.js';\nimport decodeJPEG2000 from './decoders/decodeJPEG2000.js';\n\nfunction decodeImageFrame (imageFrame, transferSyntax, pixelData, decodeConfig, options) {\n  const start = new Date().getTime();\n\n  if (transferSyntax === '1.2.840.10008.1.2') {\n    // Implicit VR Little Endian\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.1') {\n    // Explicit VR Little Endian\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.2') {\n    // Explicit VR Big Endian (retired)\n    imageFrame = decodeBigEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.1.99') {\n    // Deflate transfer syntax (deflated by dicomParser)\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.5') {\n    // RLE Lossless\n    imageFrame = decodeRLE(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.50') {\n    // JPEG Baseline lossy process 1 (8 bit)\n    imageFrame = decodeJPEGBaseline(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.51') {\n    // JPEG Baseline lossy process 2 & 4 (12 bit)\n    imageFrame = decodeJPEGBaseline(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.57') {\n    // JPEG Lossless, Nonhierarchical (Processes 14)\n    imageFrame = decodeJPEGLossless(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.70') {\n    // JPEG Lossless, Nonhierarchical (Processes 14 [Selection 1])\n    imageFrame = decodeJPEGLossless(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.80') {\n    // JPEG-LS Lossless Image Compression\n    imageFrame = decodeJPEGLS(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.81') {\n    // JPEG-LS Lossy (Near-Lossless) Image Compression\n    imageFrame = decodeJPEGLS(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.90') {\n    // JPEG 2000 Lossless\n    imageFrame = decodeJPEG2000(imageFrame, pixelData, decodeConfig, options);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.91') {\n    // JPEG 2000 Lossy\n    imageFrame = decodeJPEG2000(imageFrame, pixelData, decodeConfig, options);\n  } else {\n    throw new Error(`no decoder for transfer syntax ${transferSyntax}`);\n  }\n\n  /* Don't know if these work...\n   // JPEG 2000 Part 2 Multicomponent Image Compression (Lossless Only)\n   else if(transferSyntax === \"1.2.840.10008.1.2.4.92\")\n   {\n   return decodeJPEG2000(dataSet, frame);\n   }\n   // JPEG 2000 Part 2 Multicomponent Image Compression\n   else if(transferSyntax === \"1.2.840.10008.1.2.4.93\")\n   {\n   return decodeJPEG2000(dataSet, frame);\n   }\n   */\n\n  const shouldShift = imageFrame.pixelRepresentation !== undefined && imageFrame.pixelRepresentation === 1;\n  const shift = (shouldShift && imageFrame.bitsStored !== undefined) ? (32 - imageFrame.bitsStored) : undefined;\n\n  if (shouldShift && shift !== undefined) {\n    for (let i = 0; i < imageFrame.pixelData.length; i++) {\n      // eslint-disable-next-line no-bitwise\n      imageFrame.pixelData[i] = (imageFrame.pixelData[i] << shift >> shift);\n    }\n  }\n\n  const end = new Date().getTime();\n\n  imageFrame.decodeTimeInMS = end - start;\n\n  return imageFrame;\n}\n\nexport default decodeImageFrame;\n","function decodeLittleEndian (imageFrame, pixelData) {\n  let arrayBuffer = pixelData.buffer;\n  let offset = pixelData.byteOffset;\n  const length = pixelData.length;\n\n  if (imageFrame.bitsAllocated === 16) {\n    // if pixel data is not aligned on even boundary, shift it so we can create the 16 bit array\n    // buffers on it\n    if (offset % 2) {\n      arrayBuffer = arrayBuffer.slice(offset);\n      offset = 0;\n    }\n\n    if (imageFrame.pixelRepresentation === 0) {\n      imageFrame.pixelData = new Uint16Array(arrayBuffer, offset, length / 2);\n    } else {\n      imageFrame.pixelData = new Int16Array(arrayBuffer, offset, length / 2);\n    }\n  } else if (imageFrame.bitsAllocated === 8 || imageFrame.bitsAllocated === 1) {\n    imageFrame.pixelData = pixelData;\n  } else if (imageFrame.bitsAllocated === 32) {\n    // if pixel data is not aligned on even boundary, shift it\n    if (offset % 2) {\n      arrayBuffer = arrayBuffer.slice(offset);\n      offset = 0;\n    }\n\n    imageFrame.pixelData = new Float32Array(arrayBuffer, offset, length / 4);\n  }\n\n  return imageFrame;\n}\n\nexport default decodeLittleEndian;\n","/* eslint no-bitwise: 0 */\nfunction swap16 (val) {\n  return ((val & 0xFF) << 8) |\n    ((val >> 8) & 0xFF);\n}\n\n\nfunction decodeBigEndian (imageFrame, pixelData) {\n  if (imageFrame.bitsAllocated === 16) {\n    let arrayBuffer = pixelData.buffer;\n    let offset = pixelData.byteOffset;\n    const length = pixelData.length;\n    // if pixel data is not aligned on even boundary, shift it so we can create the 16 bit array\n    // buffers on it\n\n    if (offset % 2) {\n      arrayBuffer = arrayBuffer.slice(offset);\n      offset = 0;\n    }\n\n    if (imageFrame.pixelRepresentation === 0) {\n      imageFrame.pixelData = new Uint16Array(arrayBuffer, offset, length / 2);\n    } else {\n      imageFrame.pixelData = new Int16Array(arrayBuffer, offset, length / 2);\n    }\n    // Do the byte swap\n    for (let i = 0; i < imageFrame.pixelData.length; i++) {\n      imageFrame.pixelData[i] = swap16(imageFrame.pixelData[i]);\n    }\n\n  } else if (imageFrame.bitsAllocated === 8) {\n    imageFrame.pixelData = pixelData;\n  }\n\n  return imageFrame;\n}\n\nexport default decodeBigEndian;\n","function decodeRLE (imageFrame, pixelData) {\n  if (imageFrame.bitsAllocated === 8) {\n    if (imageFrame.planarConfiguration) {\n      return decode8Planar(imageFrame, pixelData);\n    }\n\n    return decode8(imageFrame, pixelData);\n  } else if (imageFrame.bitsAllocated === 16) {\n    return decode16(imageFrame, pixelData);\n  }\n\n  throw new Error('unsupported pixel format for RLE');\n}\n\nfunction decode8 (imageFrame, pixelData) {\n  const frameData = pixelData;\n  const frameSize = imageFrame.rows * imageFrame.columns;\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\n  const out = new Int8Array(outFrame);\n\n  let outIndex = 0;\n  const numSegments = header.getInt32(0, true);\n\n  for (let s = 0; s < numSegments; ++s) {\n    outIndex = s;\n\n    let inIndex = header.getInt32((s + 1) * 4, true);\n    let maxIndex = header.getInt32((s + 2) * 4, true);\n\n    if (maxIndex === 0) {\n      maxIndex = frameData.length;\n    }\n\n    const endOfSegment = frameSize * numSegments;\n\n    while (inIndex < maxIndex) {\n      const n = data[inIndex++];\n\n      if (n >= 0 && n <= 127) {\n        // copy n bytes\n        for (let i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {\n          out[outIndex] = data[inIndex++];\n          outIndex += imageFrame.samplesPerPixel;\n        }\n      } else if (n <= -1 && n >= -127) {\n        const value = data[inIndex++];\n        // run of n bytes\n\n        for (let j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {\n          out[outIndex] = value;\n          outIndex += imageFrame.samplesPerPixel;\n        }\n      }/* else if (n === -128) {\n\n      } // do nothing */\n    }\n  }\n  imageFrame.pixelData = new Uint8Array(outFrame);\n\n  return imageFrame;\n}\n\nfunction decode8Planar (imageFrame, pixelData) {\n  const frameData = pixelData;\n  const frameSize = imageFrame.rows * imageFrame.columns;\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\n  const out = new Int8Array(outFrame);\n\n  let outIndex = 0;\n  const numSegments = header.getInt32(0, true);\n\n  for (let s = 0; s < numSegments; ++s) {\n    outIndex = s * frameSize;\n\n    let inIndex = header.getInt32((s + 1) * 4, true);\n    let maxIndex = header.getInt32((s + 2) * 4, true);\n\n    if (maxIndex === 0) {\n      maxIndex = frameData.length;\n    }\n\n    const endOfSegment = frameSize * numSegments;\n\n    while (inIndex < maxIndex) {\n      const n = data[inIndex++];\n\n      if (n >= 0 && n <= 127) {\n        // copy n bytes\n        for (let i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {\n          out[outIndex] = data[inIndex++];\n          outIndex++;\n        }\n      } else if (n <= -1 && n >= -127) {\n        const value = data[inIndex++];\n        // run of n bytes\n\n        for (let j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {\n          out[outIndex] = value;\n          outIndex++;\n        }\n      }/* else if (n === -128) {\n\n      } // do nothing */\n    }\n  }\n  imageFrame.pixelData = new Uint8Array(outFrame);\n\n  return imageFrame;\n}\n\nfunction decode16 (imageFrame, pixelData) {\n  const frameData = pixelData;\n  const frameSize = imageFrame.rows * imageFrame.columns;\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel * 2);\n\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\n  const out = new Int8Array(outFrame);\n\n  const numSegments = header.getInt32(0, true);\n\n  for (let s = 0; s < numSegments; ++s) {\n    let outIndex = 0;\n    const highByte = (s === 0 ? 1 : 0);\n\n    let inIndex = header.getInt32((s + 1) * 4, true);\n    let maxIndex = header.getInt32((s + 2) * 4, true);\n\n    if (maxIndex === 0) {\n      maxIndex = frameData.length;\n    }\n\n    while (inIndex < maxIndex) {\n      const n = data[inIndex++];\n\n      if (n >= 0 && n <= 127) {\n        for (let i = 0; i < n + 1 && outIndex < frameSize; ++i) {\n          out[(outIndex * 2) + highByte] = data[inIndex++];\n          outIndex++;\n        }\n      } else if (n <= -1 && n >= -127) {\n        const value = data[inIndex++];\n\n        for (let j = 0; j < -n + 1 && outIndex < frameSize; ++j) {\n          out[(outIndex * 2) + highByte] = value;\n          outIndex++;\n        }\n      }/* else if (n === -128) {\n\n      } // do nothing */\n    }\n  }\n  if (imageFrame.pixelRepresentation === 0) {\n    imageFrame.pixelData = new Uint16Array(outFrame);\n  } else {\n    imageFrame.pixelData = new Int16Array(outFrame);\n  }\n\n  return imageFrame;\n}\n\nexport default decodeRLE;\n","\n\nfunction decodeJPEGBaseline (imageFrame, pixelData) {\n  // check to make sure codec is loaded\n  if (typeof JpegImage === 'undefined') {\n    throw new Error('No JPEG Baseline decoder loaded');\n  }\n  const jpeg = new JpegImage();\n\n  jpeg.parse(pixelData);\n\n  // Do not use the internal jpeg.js color transformation,\n  // since we will handle this afterwards\n  jpeg.colorTransform = false;\n\n  if (imageFrame.bitsAllocated === 8) {\n    imageFrame.pixelData = jpeg.getData(imageFrame.columns, imageFrame.rows);\n\n    return imageFrame;\n  } else if (imageFrame.bitsAllocated === 16) {\n    imageFrame.pixelData = jpeg.getData16(imageFrame.columns, imageFrame.rows);\n\n    return imageFrame;\n  }\n}\n\nexport default decodeJPEGBaseline;\n","\n\nfunction decodeJPEGLossless (imageFrame, pixelData) {\n  // check to make sure codec is loaded\n  if (typeof jpeg === 'undefined' ||\n    typeof jpeg.lossless === 'undefined' ||\n    typeof jpeg.lossless.Decoder === 'undefined') {\n    throw new Error('No JPEG Lossless decoder loaded');\n  }\n\n  const byteOutput = imageFrame.bitsAllocated <= 8 ? 1 : 2;\n  // console.time('jpeglossless');\n  const buffer = pixelData.buffer;\n  const decoder = new jpeg.lossless.Decoder();\n  const decompressedData = decoder.decode(buffer, pixelData.byteOffset, pixelData.length, byteOutput);\n  // console.timeEnd('jpeglossless');\n\n  if (imageFrame.pixelRepresentation === 0) {\n    if (imageFrame.bitsAllocated === 16) {\n      imageFrame.pixelData = new Uint16Array(decompressedData.buffer);\n\n      return imageFrame;\n    }\n    // untested!\n    imageFrame.pixelData = new Uint8Array(decompressedData.buffer);\n\n    return imageFrame;\n\n  }\n  imageFrame.pixelData = new Int16Array(decompressedData.buffer);\n\n  return imageFrame;\n\n}\n\nexport default decodeJPEGLossless;\n","import getMinMax from './getMinMax.js';\n\n/**\n * Check the minimum and maximum values in the imageFrame pixel data\n * match with the provided smallestPixelValue and largestPixelValue metaData.\n *\n * If 'strict' is true, log to the console a warning if these values do not match.\n * Otherwise, correct them automatically.\n *\n * @param {Object} imageFrame\n * @param {Boolean} strict If 'strict' is true, log to the console a warning if these values do not match.\n * Otherwise, correct them automatically.Default is true.\n */\nexport default function calculateMinMax (imageFrame, strict = true) {\n  const minMax = getMinMax(imageFrame.pixelData);\n  const mustAssign = !(isNumber(imageFrame.smallestPixelValue) && isNumber(imageFrame.largestPixelValue));\n\n\n  if (strict === true && !mustAssign) {\n    if (imageFrame.smallestPixelValue !== minMax.min) {\n      console.warn('Image smallestPixelValue tag is incorrect. Rendering performance will suffer considerably.');\n    }\n\n    if (imageFrame.largestPixelValue !== minMax.max) {\n      console.warn('Image largestPixelValue tag is incorrect. Rendering performance will suffer considerably.');\n    }\n  } else {\n    imageFrame.smallestPixelValue = minMax.min;\n    imageFrame.largestPixelValue = minMax.max;\n  }\n}\n\nfunction isNumber (numValue) {\n  return typeof numValue === 'number';\n}\n","export default '2.1.4';\n","let charLS;\n\nfunction jpegLSDecode (data, isSigned) {\n  // prepare input parameters\n  const dataPtr = charLS._malloc(data.length);\n\n  charLS.writeArrayToMemory(data, dataPtr);\n\n  // prepare output parameters\n  const imagePtrPtr = charLS._malloc(4);\n  const imageSizePtr = charLS._malloc(4);\n  const widthPtr = charLS._malloc(4);\n  const heightPtr = charLS._malloc(4);\n  const bitsPerSamplePtr = charLS._malloc(4);\n  const stridePtr = charLS._malloc(4);\n  const allowedLossyErrorPtr = charLS._malloc(4);\n  const componentsPtr = charLS._malloc(4);\n  const interleaveModePtr = charLS._malloc(4);\n\n  // Decode the image\n  const result = charLS.ccall(\n    'jpegls_decode',\n    'number',\n    ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],\n    [dataPtr, data.length, imagePtrPtr, imageSizePtr, widthPtr, heightPtr, bitsPerSamplePtr, stridePtr, componentsPtr, allowedLossyErrorPtr, interleaveModePtr]\n  );\n\n  // Extract result values into object\n  const image = {\n    result,\n    width: charLS.getValue(widthPtr, 'i32'),\n    height: charLS.getValue(heightPtr, 'i32'),\n    bitsPerSample: charLS.getValue(bitsPerSamplePtr, 'i32'),\n    stride: charLS.getValue(stridePtr, 'i32'),\n    components: charLS.getValue(componentsPtr, 'i32'),\n    allowedLossyError: charLS.getValue(allowedLossyErrorPtr, 'i32'),\n    interleaveMode: charLS.getValue(interleaveModePtr, 'i32'),\n    pixelData: undefined\n  };\n\n  // Copy image from emscripten heap into appropriate array buffer type\n  const imagePtr = charLS.getValue(imagePtrPtr, '*');\n\n  if (image.bitsPerSample <= 8) {\n    image.pixelData = new Uint8Array(image.width * image.height * image.components);\n    image.pixelData.set(new Uint8Array(charLS.HEAP8.buffer, imagePtr, image.pixelData.length));\n  } else if (isSigned) {\n    image.pixelData = new Int16Array(image.width * image.height * image.components);\n    image.pixelData.set(new Int16Array(charLS.HEAP16.buffer, imagePtr, image.pixelData.length));\n  } else {\n    image.pixelData = new Uint16Array(image.width * image.height * image.components);\n    image.pixelData.set(new Uint16Array(charLS.HEAP16.buffer, imagePtr, image.pixelData.length));\n  }\n\n  // free memory and return image object\n  charLS._free(dataPtr);\n  charLS._free(imagePtr);\n  charLS._free(imagePtrPtr);\n  charLS._free(imageSizePtr);\n  charLS._free(widthPtr);\n  charLS._free(heightPtr);\n  charLS._free(bitsPerSamplePtr);\n  charLS._free(stridePtr);\n  charLS._free(componentsPtr);\n  charLS._free(interleaveModePtr);\n\n  return image;\n}\n\nfunction initializeJPEGLS () {\n  // check to make sure codec is loaded\n  if (typeof CharLS === 'undefined') {\n    throw new Error('No JPEG-LS decoder loaded');\n  }\n\n  // Try to initialize CharLS\n  // CharLS https://github.com/cornerstonejs/charls\n  if (!charLS) {\n    charLS = CharLS();\n    if (!charLS || !charLS._jpegls_decode) {\n      throw new Error('JPEG-LS failed to initialize');\n    }\n  }\n\n}\n\nfunction decodeJPEGLS (imageFrame, pixelData) {\n  initializeJPEGLS();\n\n  const image = jpegLSDecode(pixelData, imageFrame.pixelRepresentation === 1);\n\n  // throw error if not success or too much data\n  if (image.result !== 0 && image.result !== 6) {\n    throw new Error(`JPEG-LS decoder failed to decode frame (error code ${image.result})`);\n  }\n\n  imageFrame.columns = image.width;\n  imageFrame.rows = image.height;\n  imageFrame.pixelData = image.pixelData;\n\n  return imageFrame;\n}\n\nexport default decodeJPEGLS;\nexport { initializeJPEGLS };\n","function decodeJpx (imageFrame, pixelData) {\n  const jpxImage = new JpxImage();\n\n  jpxImage.parse(pixelData);\n\n  const tileCount = jpxImage.tiles.length;\n\n  if (tileCount !== 1) {\n    throw new Error(`JPEG2000 decoder returned a tileCount of ${tileCount}, when 1 is expected`);\n  }\n\n  imageFrame.columns = jpxImage.width;\n  imageFrame.rows = jpxImage.height;\n  imageFrame.pixelData = jpxImage.tiles[0].items;\n\n  return imageFrame;\n}\n\nlet openJPEG;\n\nfunction decodeOpenJPEG (data, bytesPerPixel, signed) {\n  const dataPtr = openJPEG._malloc(data.length);\n\n  openJPEG.writeArrayToMemory(data, dataPtr);\n\n  // create param outpout\n  const imagePtrPtr = openJPEG._malloc(4);\n  const imageSizePtr = openJPEG._malloc(4);\n  const imageSizeXPtr = openJPEG._malloc(4);\n  const imageSizeYPtr = openJPEG._malloc(4);\n  const imageSizeCompPtr = openJPEG._malloc(4);\n\n  const t0 = new Date().getTime();\n  const ret = openJPEG.ccall('jp2_decode', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number'],\n    [dataPtr, data.length, imagePtrPtr, imageSizePtr, imageSizeXPtr, imageSizeYPtr, imageSizeCompPtr]);\n  // add num vomp..etc\n\n  if (ret !== 0) {\n    console.log('[opj_decode] decoding failed!');\n    openJPEG._free(dataPtr);\n    openJPEG._free(openJPEG.getValue(imagePtrPtr, '*'));\n    openJPEG._free(imageSizeXPtr);\n    openJPEG._free(imageSizeYPtr);\n    openJPEG._free(imageSizePtr);\n    openJPEG._free(imageSizeCompPtr);\n\n    return;\n  }\n\n  const imagePtr = openJPEG.getValue(imagePtrPtr, '*');\n\n  const image = {\n    length: openJPEG.getValue(imageSizePtr, 'i32'),\n    sx: openJPEG.getValue(imageSizeXPtr, 'i32'),\n    sy: openJPEG.getValue(imageSizeYPtr, 'i32'),\n    nbChannels: openJPEG.getValue(imageSizeCompPtr, 'i32'), // hard coded for now\n    perf_timetodecode: undefined,\n    pixelData: undefined\n  };\n\n  // Copy the data from the EMSCRIPTEN heap into the correct type array\n  const length = image.sx * image.sy * image.nbChannels;\n  const src32 = new Int32Array(openJPEG.HEAP32.buffer, imagePtr, length);\n\n  if (bytesPerPixel === 1) {\n    if (Uint8Array.from) {\n      image.pixelData = Uint8Array.from(src32);\n    } else {\n      image.pixelData = new Uint8Array(length);\n      for (let i = 0; i < length; i++) {\n        image.pixelData[i] = src32[i];\n      }\n    }\n  } else if (signed) {\n    if (Int16Array.from) {\n      image.pixelData = Int16Array.from(src32);\n    } else {\n      image.pixelData = new Int16Array(length);\n      for (let i = 0; i < length; i++) {\n        image.pixelData[i] = src32[i];\n      }\n    }\n  } else if (Uint16Array.from) {\n    image.pixelData = Uint16Array.from(src32);\n  } else {\n    image.pixelData = new Uint16Array(length);\n    for (let i = 0; i < length; i++) {\n      image.pixelData[i] = src32[i];\n    }\n  }\n\n  const t1 = new Date().getTime();\n\n  image.perf_timetodecode = t1 - t0;\n\n  // free\n  openJPEG._free(dataPtr);\n  openJPEG._free(imagePtrPtr);\n  openJPEG._free(imagePtr);\n  openJPEG._free(imageSizePtr);\n  openJPEG._free(imageSizeXPtr);\n  openJPEG._free(imageSizeYPtr);\n  openJPEG._free(imageSizeCompPtr);\n\n  return image;\n}\n\nfunction decodeOpenJpeg2000 (imageFrame, pixelData) {\n  const bytesPerPixel = imageFrame.bitsAllocated <= 8 ? 1 : 2;\n  const signed = imageFrame.pixelRepresentation === 1;\n\n  const image = decodeOpenJPEG(pixelData, bytesPerPixel, signed);\n\n  imageFrame.columns = image.sx;\n  imageFrame.rows = image.sy;\n  imageFrame.pixelData = image.pixelData;\n  if (image.nbChannels > 1) {\n    imageFrame.photometricInterpretation = 'RGB';\n  }\n\n  return imageFrame;\n}\n\nfunction initializeJPEG2000 (decodeConfig) {\n  // check to make sure codec is loaded\n  if (!decodeConfig.usePDFJS) {\n    if (typeof OpenJPEG === 'undefined') {\n      throw new Error('OpenJPEG decoder not loaded');\n    }\n  }\n\n  if (!openJPEG) {\n    openJPEG = OpenJPEG();\n    if (!openJPEG || !openJPEG._jp2_decode) {\n      throw new Error('OpenJPEG failed to initialize');\n    }\n  }\n}\n\nfunction decodeJPEG2000 (imageFrame, pixelData, decodeConfig, options = {}) {\n  initializeJPEG2000(decodeConfig);\n\n  if (options.usePDFJS || decodeConfig.usePDFJS) {\n    // OHIF image-JPEG2000 https://github.com/OHIF/image-JPEG2000\n    // console.log('PDFJS')\n    return decodeJpx(imageFrame, pixelData);\n  }\n\n  // OpenJPEG2000 https://github.com/jpambrun/openjpeg\n  // console.log('OpenJPEG')\n  return decodeOpenJpeg2000(imageFrame, pixelData);\n}\n\nexport default decodeJPEG2000;\nexport { initializeJPEG2000 };\n","import { registerTaskHandler } from './webWorker.js';\nimport decodeTask from './decodeTask/decodeTask.js';\n\n// register our task\nregisterTaskHandler(decodeTask);\n\nexport { registerTaskHandler };\nexport { default as version } from '../version.js';\n","// an object of task handlers\nconst taskHandlers = {};\n\n// Flag to ensure web worker is only initialized once\nlet initialized = false;\n\n// the configuration object passed in when the web worker manager is initialized\nlet config;\n\n/**\n * Initialization function that loads additional web workers and initializes them\n * @param data\n */\nfunction initialize (data) {\n  // console.log('web worker initialize ', data.workerIndex);\n  // prevent initialization from happening more than once\n  if (initialized) {\n    return;\n  }\n\n  // save the config data\n  config = data.config;\n\n  // load any additional web worker tasks\n  if (data.config.webWorkerTaskPaths) {\n    for (let i = 0; i < data.config.webWorkerTaskPaths.length; i++) {\n      self.importScripts(data.config.webWorkerTaskPaths[i]);\n    }\n  }\n\n  // initialize each task handler\n  Object.keys(taskHandlers).forEach(function (key) {\n    taskHandlers[key].initialize(config.taskConfiguration);\n  });\n\n  // tell main ui thread that we have completed initialization\n  self.postMessage({\n    taskType: 'initialize',\n    status: 'success',\n    result: {\n    },\n    workerIndex: data.workerIndex\n  });\n\n  initialized = true;\n}\n\n/**\n * Function exposed to web worker tasks to register themselves\n * @param taskHandler\n */\nexport function registerTaskHandler (taskHandler) {\n  if (taskHandlers[taskHandler.taskType]) {\n    console.log('attempt to register duplicate task handler \"', taskHandler.taskType, '\"');\n\n    return false;\n  }\n  taskHandlers[taskHandler.taskType] = taskHandler;\n  if (initialized) {\n    taskHandler.initialize(config.taskConfiguration);\n  }\n}\n\n/**\n * Function to load a new web worker task with updated configuration\n * @param data\n */\nfunction loadWebWorkerTask (data) {\n  config = data.config;\n  self.importScripts(data.sourcePath);\n}\n\n/**\n * Web worker message handler - dispatches messages to the registered task handlers\n * @param msg\n */\nself.onmessage = function (msg) {\n  // console.log('web worker onmessage', msg.data);\n\n  // handle initialize message\n  if (msg.data.taskType === 'initialize') {\n    initialize(msg.data);\n\n    return;\n  }\n\n  // handle loadWebWorkerTask message\n  if (msg.data.taskType === 'loadWebWorkerTask') {\n    loadWebWorkerTask(msg.data);\n\n    return;\n  }\n\n  // dispatch the message if there is a handler registered for it\n  if (taskHandlers[msg.data.taskType]) {\n    taskHandlers[msg.data.taskType].handler(msg.data, function (result, transferList) {\n      self.postMessage({\n        taskType: msg.data.taskType,\n        status: 'success',\n        result,\n        workerIndex: msg.data.workerIndex\n      }, transferList);\n    });\n\n    return;\n  }\n\n  // not task handler registered - send a failure message back to ui thread\n  console.log('no task handler for ', msg.data.taskType);\n  console.log(taskHandlers);\n  self.postMessage({\n    taskType: msg.data.taskType,\n    status: 'failed - no task handler registered',\n    workerIndex: msg.data.workerIndex\n  });\n};\n","import { initializeJPEG2000 } from '../../shared/decoders/decodeJPEG2000.js';\nimport { initializeJPEGLS } from '../../shared/decoders/decodeJPEGLS.js';\nimport calculateMinMax from '../../shared/calculateMinMax.js';\nimport decodeImageFrame from '../../shared/decodeImageFrame.js';\n\n// flag to ensure codecs are loaded only once\nlet codecsLoaded = false;\n\n// the configuration object for the decodeTask\nlet decodeConfig;\n\n/**\n * Function to control loading and initializing the codecs\n * @param config\n */\nfunction loadCodecs (config) {\n  // prevent loading codecs more than once\n  if (codecsLoaded) {\n    return;\n  }\n\n  // Load the codecs\n  // console.time('loadCodecs');\n  self.importScripts(config.decodeTask.codecsPath);\n  codecsLoaded = true;\n  // console.timeEnd('loadCodecs');\n\n  // Initialize the codecs\n  if (config.decodeTask.initializeCodecsOnStartup) {\n    // console.time('initializeCodecs');\n    initializeJPEG2000(config.decodeTask);\n    initializeJPEGLS(config.decodeTask);\n    // console.timeEnd('initializeCodecs');\n  }\n}\n\n/**\n * Task initialization function\n */\nfunction initialize (config) {\n  decodeConfig = config;\n  if (config.decodeTask.loadCodecsOnStartup) {\n    loadCodecs(config);\n  }\n}\n\n/**\n * Task handler function\n */\nfunction handler (data, doneCallback) {\n  // Load the codecs if they aren't already loaded\n  loadCodecs(decodeConfig);\n\n  const strict = decodeConfig && decodeConfig.decodeTask && decodeConfig.decodeTask.strict;\n  const imageFrame = data.data.imageFrame;\n\n  // convert pixel data from ArrayBuffer to Uint8Array since web workers support passing ArrayBuffers but\n  // not typed arrays\n  const pixelData = new Uint8Array(data.data.pixelData);\n\n  decodeImageFrame(\n    imageFrame,\n    data.data.transferSyntax,\n    pixelData,\n    decodeConfig.decodeTask,\n    data.data.options);\n\n  if (!imageFrame.pixelData) {\n    throw new Error('decodeTask: imageFrame.pixelData is undefined after decoding');\n  }\n\n  calculateMinMax(imageFrame, strict);\n\n  // convert from TypedArray to ArrayBuffer since web workers support passing ArrayBuffers but not\n  // typed arrays\n  imageFrame.pixelData = imageFrame.pixelData.buffer;\n\n  // invoke the callback with our result and pass the pixelData in the transferList to move it to\n  // UI thread without making a copy\n  doneCallback(imageFrame, [imageFrame.pixelData]);\n}\n\nexport default {\n  taskType: 'decodeTask',\n  handler,\n  initialize\n};\n"],"sourceRoot":""}